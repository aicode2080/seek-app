{"version":3,"file":"search-code.js","sources":["../src/search-code.js"],"sourcesContent":["// 根据搜索词 复制对应 code-template 文件夹下面的代码\n\nconst inquirer = require('inquirer');\nconst fs = require('fs');\nconst path = require('path');\n\nconst chalk = require('chalk'); // 用于在控制台输出彩色文本\n\nconst commander = require('commander');\n\nconst packageJson = require('../package.json');\n\nconst templatePath = path.join(__dirname, '../code-template'); // 模板文件路径\n\nasync function createMainFun(params) {\n  commander.version(packageJson.version).action(async () => {\n    await inputFun();\n  });\n}\n\n/**\n * 异步函数，用于提示用户输入搜索词。\n * @param {Object} params - 输入参数（当前未使用）。\n * @returns {Promise<void>} - 无返回值的 Promise。\n */\nasync function inputFun(params) {\n  const inputText = await inquirer.prompt([\n    {\n      type: 'input',\n      name: 'text',\n      message: '请输入搜索词：',\n      default: '美化滚动条',\n    },\n  ]);\n  const searchText = inputText.text;\n  console.log(`您输入了${searchText}, 正在搜索中...`);\n  readFileContent(searchText);\n}\n\n/**\n * 根据指定的文件类型列出目录中的所有文件。\n *\n * @async\n * @function listFilesByType\n * @param {string} dirPath - 需要读取的目录路径。\n * @param {string} fileType - 要过滤的文件类型（不带点）。\n * @throws {Error} 读取目录时发生的错误。\n * @returns {Promise<void>} 无返回值。\n */\nasync function listFilesByType(dirPath, fileType, text) {\n  try {\n    let result = [];\n    const files = await fs.readdirSync(dirPath);\n    let filteredFiles;\n    if (fileType === '*') {\n      filteredFiles = files;\n    } else {\n      filteredFiles = files.filter(\n        (file) => path.extname(file) === `.${fileType}`\n      );\n    }\n\n    console.log(`Files of type .${fileType} in ${dirPath}:`);\n    if (filteredFiles?.length > 0) {\n      result = await filteredFiles.filter((file) => file.indexOf(text) > -1);\n    } else {\n      reject(new Error(`没有找到匹配的代码片段`));\n      console.log('没有找到匹配的代码片段');\n    }\n    console.log(result);\n    return result;\n  } catch (error) {\n    console.error(`Error reading directory ${dirPath}:`, error);\n  }\n}\n/**\n * 异步读取指定文件内容并输出到控制台。\n * \n * @param {string} text - 用于搜索文件的文本。\n * @returns {Promise<void>} - 无返回值的 Promise。\n * \n * @throws {Error} - 如果读取文件或其他操作失败，将抛出错误。\n * \n * 该函数首先列出指定路径下的文件，然后提示用户选择要复制的文件，最后读取并输出所选文件的内容。\n */\nasync function readFileContent(text) {\n  try {\n    console.log(templatePath);\n    const res = await listFilesByType(templatePath, '*', text);\n    // console.log(chalk.yellow('搜索结果：'), res);\n    const choices = res.map((item, index) => ({\n      name: item,\n      value: index + 1,\n    }));\n    // 让用户选择文件\n    const { selectedFileIndex } = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'selectedFileIndex',\n        message: '请选择代码片段文件:',\n        choices: choices,\n      },\n    ]);\n    const selectedFile = res[selectedFileIndex - 1];\n    const filePath = path.join(templatePath, selectedFile);\n\n    // 读取文件内容\n    const content = await fs.readFileSync(filePath, 'utf8');\n    console.log(content);\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n// 主函数\ncreateMainFun();\n\ncommander.parse(process.argv);\n"],"names":["inquirer","require","fs","path","commander","packageJson","templatePath","join","__dirname","async","version","action","searchText","prompt","type","name","message","default","text","console","log","res","dirPath","fileType","_filteredFiles","result","files","readdirSync","filteredFiles","filter","file","extname","length","indexOf","reject","Error","error","listFilesByType","choices","map","item","index","value","selectedFileIndex","selectedFile","filePath","content","readFileSync","readFileContent","inputFun","createMainFun","parse","process","argv"],"mappings":";aAEA,MAAMA,EAAWC,QAAQ,YACnBC,EAAKD,QAAQ,MACbE,EAAOF,QAAQ,QAEPA,QAAQ,SAEtB,MAAMG,EAAYH,QAAQ,aAEpBI,EAAcJ,QAAQ,mBAEtBK,EAAeH,EAAKI,KAAKC,UAAW,qBAE1CC,iBACEL,EAAUM,QAAQL,EAAYK,SAASC,QAAOF,gBAUhDA,iBACE,MAQMG,SARkBZ,EAASa,OAAO,CACtC,CACEC,KAAM,QACNC,KAAM,OACNC,QAAS,UACTC,QAAS,YAGgBC,KAC7BC,QAAQC,IAAI,OAAOR,eAkDrBH,eAA+BS,GAC7B,IACEC,QAAQC,IAAId,GACZ,MAAMe,QAvCVZ,eAA+Ba,EAASC,EAAUL,GAChD,IAAI,IAAAM,EACF,IAAIC,EAAS,GACb,MAAMC,QAAcxB,EAAGyB,YAAYL,GACnC,IAAIM,EAiBJ,OAfEA,EADe,MAAbL,EACcG,EAEAA,EAAMG,QACnBC,GAAS3B,EAAK4B,QAAQD,KAAU,IAAIP,MAIzCJ,QAAQC,IAAI,kBAAkBG,QAAeD,OAC5BE,QAAbA,EAAAI,SAAAJ,IAAaA,OAAbA,EAAAA,EAAeQ,QAAS,EAC1BP,QAAeG,EAAcC,QAAQC,GAASA,EAAKG,QAAQf,IAAS,KAEpEgB,OAAO,IAAIC,MAAM,gBACjBhB,QAAQC,IAAI,gBAEdD,QAAQC,IAAIK,GACLA,CACR,CAAC,MAAOW,GACPjB,QAAQiB,MAAM,2BAA2Bd,KAAYc,EACvD,CACF,CAcsBC,CAAgB/B,EAAc,IAAKY,GAE/CoB,EAAUjB,EAAIkB,KAAI,CAACC,EAAMC,KAAW,CACxC1B,KAAMyB,EACNE,MAAOD,EAAQ,OAGXE,kBAAEA,SAA4B3C,EAASa,OAAO,CAClD,CACEC,KAAM,OACNC,KAAM,oBACNC,QAAS,aACTsB,QAASA,KAGPM,EAAevB,EAAIsB,EAAoB,GACvCE,EAAW1C,EAAKI,KAAKD,EAAcsC,GAGnCE,QAAgB5C,EAAG6C,aAAaF,EAAU,QAChD1B,QAAQC,IAAI0B,EACb,CAAC,MAAOV,GACPjB,QAAQiB,MAAMA,EAAMpB,QACtB,CACF,CA5EEgC,CAAgBpC,EAClB,CArBUqC,EAAU,GAEpB,CAgGAC,GAEA9C,EAAU+C,MAAMC,QAAQC"}