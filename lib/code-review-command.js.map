{"version":3,"file":"code-review-command.js","sources":["../src/code-review-command.js"],"sourcesContent":["const chalk = require('chalk');\nconst path = require('path');\nconst { spawn } = require('child_process');\nconst CodeReviewer = require('./code-review');\n\nasync function handleCodeReview(options = {}) {\n  console.log(chalk.green('******开始多模型代码审核******'));\n\n  try {\n    // 检查可用的 API Keys\n    const availableModels = [];\n    if (process.env.HUGGING_FACE_API_KEY) {\n      availableModels.push('Hugging Face (BLOOM)');\n    }\n    if (process.env.DASHSCOPE_API_KEY) {\n      availableModels.push('通义千问');\n    }\n    if (process.env.OPENAI_API_KEY) {\n      availableModels.push('OpenAI GPT');\n    }\n\n    if (availableModels.length === 0) {\n      console.log(chalk.yellow('提示：未设置任何 API Key'));\n      console.log(chalk.blue('\\n请设置以下环境变量之一：'));\n      console.log(chalk.blue('\\n1. Hugging Face API Key:'));\n      console.log(chalk.white('   # Linux/Mac:'));\n      console.log(chalk.gray('   export HUGGING_FACE_API_KEY=你的API密钥'));\n      console.log(chalk.white('   # Windows CMD:'));\n      console.log(chalk.gray('   set HUGGING_FACE_API_KEY=你的API密钥'));\n      console.log(chalk.white('   # Windows PowerShell:'));\n      console.log(chalk.gray('   $env:HUGGING_FACE_API_KEY=\"你的API密钥\"'));\n      \n      console.log(chalk.blue('\\n2. 通义千问 API Key:'));\n      console.log(chalk.white('   # Linux/Mac:'));\n      console.log(chalk.gray('   export DASHSCOPE_API_KEY=你的API密钥'));\n      console.log(chalk.white('   # Windows CMD:'));\n      console.log(chalk.gray('   set DASHSCOPE_API_KEY=你的API密钥'));\n      console.log(chalk.white('   # Windows PowerShell:'));\n      console.log(chalk.gray('   $env:DASHSCOPE_API_KEY=\"你的API密钥\"'));\n      \n      console.log(chalk.blue('\\n3. OpenAI API Key:'));\n      console.log(chalk.white('   # Linux/Mac:'));\n      console.log(chalk.gray('   export OPENAI_API_KEY=你的API密钥'));\n      console.log(chalk.white('   # Windows CMD:'));\n      console.log(chalk.gray('   set OPENAI_API_KEY=你的API密钥'));\n      console.log(chalk.white('   # Windows PowerShell:'));\n      console.log(chalk.gray('   $env:OPENAI_API_KEY=\"你的API密钥\"'));\n      \n      console.log(chalk.blue('\\n获取方式：'));\n      console.log(chalk.blue('- Hugging Face: https://huggingface.co/settings/tokens'));\n      console.log(chalk.blue('- 通义千问: https://dashscope.aliyuncs.com/'));\n      console.log(chalk.blue('- OpenAI: https://platform.openai.com/api-keys'));\n      \n      console.log(chalk.yellow('\\n注意：设置环境变量后需要重新打开终端才能生效'));\n      return;\n    }\n\n    console.log(chalk.green('可用的模型：'));\n    availableModels.forEach(model => {\n      console.log(chalk.blue(`- ${model}`));\n    });\n\n    // 创建代码审核器实例\n    const reviewer = new CodeReviewer(options);\n\n    // 获取要审核的目录\n    const targetDir = options.targetDir || process.cwd();\n\n    console.log(chalk.blue(`\\n正在扫描目录：${targetDir}`));\n    console.log(chalk.blue('将使用所有可用的模型进行代码审核...'));\n\n    // 执行代码审核\n    const results = await reviewer.reviewDirectory(targetDir);\n\n    if (Object.values(results).every(arr => arr.length === 0)) {\n      console.log(chalk.yellow('没有找到需要审核的代码文件'));\n      return;\n    }\n\n    // 生成 HTML 报告\n    const reportPath = reviewer.generateHtmlReport(results);\n    console.log(chalk.green(`✓ 多模型代码审核对比报告已生成：${reportPath}`));\n\n    // 自动打开报告\n    if (process.platform === 'darwin') {\n      spawn('open', [reportPath]);\n    } else if (process.platform === 'win32') {\n      spawn('cmd', ['/c', 'start', reportPath]);\n    } else {\n      spawn('xdg-open', [reportPath]);\n    }\n\n  } catch (error) {\n    console.error(chalk.red(`代码审核失败：${error.message}`));\n  }\n}\n\nmodule.exports = handleCodeReview; "],"names":["chalk","require","spawn","CodeReviewer","module","exports","async","options","console","log","green","availableModels","process","env","HUGGING_FACE_API_KEY","push","DASHSCOPE_API_KEY","OPENAI_API_KEY","length","yellow","blue","white","gray","forEach","model","reviewer","targetDir","cwd","results","reviewDirectory","Object","values","every","arr","reportPath","generateHtmlReport","platform","error","red","message"],"mappings":";aAAA,MAAMA,EAAQC,QAAQ,SACTA,QAAQ,QACrB,MAAMC,MAAEA,GAAUD,QAAQ,iBACpBE,EAAeF,QAAQ,iBA8F7BG,OAAOC,QA5FPC,eAAgCC,EAAU,IACxCC,QAAQC,IAAIT,EAAMU,MAAM,0BAExB,IAEE,MAAMC,EAAkB,GAWxB,GAVIC,QAAQC,IAAIC,sBACdH,EAAgBI,KAAK,wBAEnBH,QAAQC,IAAIG,mBACdL,EAAgBI,KAAK,QAEnBH,QAAQC,IAAII,gBACdN,EAAgBI,KAAK,cAGQ,IAA3BJ,EAAgBO,OAiClB,OAhCAV,QAAQC,IAAIT,EAAMmB,OAAO,qBACzBX,QAAQC,IAAIT,EAAMoB,KAAK,mBACvBZ,QAAQC,IAAIT,EAAMoB,KAAK,+BACvBZ,QAAQC,IAAIT,EAAMqB,MAAM,oBACxBb,QAAQC,IAAIT,EAAMsB,KAAK,2CACvBd,QAAQC,IAAIT,EAAMqB,MAAM,sBACxBb,QAAQC,IAAIT,EAAMsB,KAAK,wCACvBd,QAAQC,IAAIT,EAAMqB,MAAM,6BACxBb,QAAQC,IAAIT,EAAMsB,KAAK,2CAEvBd,QAAQC,IAAIT,EAAMoB,KAAK,uBACvBZ,QAAQC,IAAIT,EAAMqB,MAAM,oBACxBb,QAAQC,IAAIT,EAAMsB,KAAK,wCACvBd,QAAQC,IAAIT,EAAMqB,MAAM,sBACxBb,QAAQC,IAAIT,EAAMsB,KAAK,qCACvBd,QAAQC,IAAIT,EAAMqB,MAAM,6BACxBb,QAAQC,IAAIT,EAAMsB,KAAK,wCAEvBd,QAAQC,IAAIT,EAAMoB,KAAK,yBACvBZ,QAAQC,IAAIT,EAAMqB,MAAM,oBACxBb,QAAQC,IAAIT,EAAMsB,KAAK,qCACvBd,QAAQC,IAAIT,EAAMqB,MAAM,sBACxBb,QAAQC,IAAIT,EAAMsB,KAAK,kCACvBd,QAAQC,IAAIT,EAAMqB,MAAM,6BACxBb,QAAQC,IAAIT,EAAMsB,KAAK,qCAEvBd,QAAQC,IAAIT,EAAMoB,KAAK,YACvBZ,QAAQC,IAAIT,EAAMoB,KAAK,2DACvBZ,QAAQC,IAAIT,EAAMoB,KAAK,4CACvBZ,QAAQC,IAAIT,EAAMoB,KAAK,wDAEvBZ,QAAQC,IAAIT,EAAMmB,OAAO,6BAI3BX,QAAQC,IAAIT,EAAMU,MAAM,WACxBC,EAAgBY,SAAQC,IACtBhB,QAAQC,IAAIT,EAAMoB,KAAK,KAAKI,KAAS,IAIvC,MAAMC,EAAW,IAAItB,EAAaI,GAG5BmB,EAAYnB,EAAQmB,WAAad,QAAQe,MAE/CnB,QAAQC,IAAIT,EAAMoB,KAAK,YAAYM,MACnClB,QAAQC,IAAIT,EAAMoB,KAAK,wBAGvB,MAAMQ,QAAgBH,EAASI,gBAAgBH,GAE/C,GAAII,OAAOC,OAAOH,GAASI,OAAMC,GAAsB,IAAfA,EAAIf,SAE1C,YADAV,QAAQC,IAAIT,EAAMmB,OAAO,kBAK3B,MAAMe,EAAaT,EAASU,mBAAmBP,GAC/CpB,QAAQC,IAAIT,EAAMU,MAAM,oBAAoBwB,MAGnB,WAArBtB,QAAQwB,SACVlC,EAAM,OAAQ,CAACgC,IACe,UAArBtB,QAAQwB,SACjBlC,EAAM,MAAO,CAAC,KAAM,QAASgC,IAE7BhC,EAAM,WAAY,CAACgC,GAGtB,CAAC,MAAOG,GACP7B,QAAQ6B,MAAMrC,EAAMsC,IAAI,UAAUD,EAAME,WAC1C,CACF"}