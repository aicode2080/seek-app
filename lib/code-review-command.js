#!/usr/bin/env node
"use strict";const o=require("chalk");require("path");const{spawn:e}=require("child_process"),l=require("./code-review");module.exports=async function(n={}){console.log(o.green("******开始多模型代码审核******"));try{const s=[];if(process.env.HUGGING_FACE_API_KEY&&s.push("Hugging Face (BLOOM)"),process.env.DASHSCOPE_API_KEY&&s.push("通义千问"),process.env.OPENAI_API_KEY&&s.push("OpenAI GPT"),0===s.length)return console.log(o.yellow("提示：未设置任何 API Key")),console.log(o.blue("\n请设置以下环境变量之一：")),console.log(o.blue("\n1. Hugging Face API Key:")),console.log(o.white("   # Linux/Mac:")),console.log(o.gray("   export HUGGING_FACE_API_KEY=你的API密钥")),console.log(o.white("   # Windows CMD:")),console.log(o.gray("   set HUGGING_FACE_API_KEY=你的API密钥")),console.log(o.white("   # Windows PowerShell:")),console.log(o.gray('   $env:HUGGING_FACE_API_KEY="你的API密钥"')),console.log(o.blue("\n2. 通义千问 API Key:")),console.log(o.white("   # Linux/Mac:")),console.log(o.gray("   export DASHSCOPE_API_KEY=你的API密钥")),console.log(o.white("   # Windows CMD:")),console.log(o.gray("   set DASHSCOPE_API_KEY=你的API密钥")),console.log(o.white("   # Windows PowerShell:")),console.log(o.gray('   $env:DASHSCOPE_API_KEY="你的API密钥"')),console.log(o.blue("\n3. OpenAI API Key:")),console.log(o.white("   # Linux/Mac:")),console.log(o.gray("   export OPENAI_API_KEY=你的API密钥")),console.log(o.white("   # Windows CMD:")),console.log(o.gray("   set OPENAI_API_KEY=你的API密钥")),console.log(o.white("   # Windows PowerShell:")),console.log(o.gray('   $env:OPENAI_API_KEY="你的API密钥"')),console.log(o.blue("\n获取方式：")),console.log(o.blue("- Hugging Face: https://huggingface.co/settings/tokens")),console.log(o.blue("- 通义千问: https://dashscope.aliyuncs.com/")),console.log(o.blue("- OpenAI: https://platform.openai.com/api-keys")),void console.log(o.yellow("\n注意：设置环境变量后需要重新打开终端才能生效"));console.log(o.green("可用的模型：")),s.forEach((e=>{console.log(o.blue(`- ${e}`))}));const c=new l(n),g=n.targetDir||process.cwd();console.log(o.blue(`\n正在扫描目录：${g}`)),console.log(o.blue("将使用所有可用的模型进行代码审核..."));const r=await c.reviewDirectory(g);if(Object.values(r).every((o=>0===o.length)))return void console.log(o.yellow("没有找到需要审核的代码文件"));const t=c.generateHtmlReport(r);console.log(o.green(`✓ 多模型代码审核对比报告已生成：${t}`)),"darwin"===process.platform?e("open",[t]):"win32"===process.platform?e("cmd",["/c","start",t]):e("xdg-open",[t])}catch(e){console.error(o.red(`代码审核失败：${e.message}`))}};
//# sourceMappingURL=code-review-command.js.map
