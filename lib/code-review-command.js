import e from"chalk";import n from"path";import{spawn as o}from"child_process";import t from"fs-extra";import s from"axios";class a{constructor(e={}){this.options={models:[{name:"bigscience/bloom-560m",apiKey:process.env.HUGGING_FACE_API_KEY,endpoint:"https://api-inference.huggingface.co/models",type:"huggingface"},{name:"qwen-7b-chat",apiKey:process.env.DASHSCOPE_API_KEY,endpoint:"https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation",type:"dashscope"},{name:"gpt-3.5-turbo",apiKey:process.env.OPENAI_API_KEY,endpoint:"https://api.openai.com/v1/chat/completions",type:"openai"}].filter((e=>e.apiKey)),temperature:.7,maxTokens:2e3,...e}}async reviewFile(o,a){try{const e=t.readFileSync(o,"utf8"),r=n.relative(process.cwd(),o),i=`请对以下代码进行审核，重点关注：\n1. 代码质量和可读性\n2. 潜在的性能问题\n3. 安全隐患\n4. 最佳实践\n5. 可能的改进建议\n\n文件路径：${r}\n代码内容：\n\`\`\`\n${e}\n\`\`\`\n\n请用中文回复，并按照以下格式输出：\n# 代码审核报告\n\n## 文件信息\n- 文件路径：${r}\n- 审核时间：${(new Date).toLocaleString()}\n- 使用模型：${a.name}\n\n## 审核结果\n[在这里详细说明审核结果]\n\n## 改进建议\n[在这里列出具体的改进建议]\n\n## 总结\n[在这里总结主要发现和建议]`;let l;switch(a.type){case"huggingface":return l=await s.post(`${a.endpoint}/${a.name}`,{inputs:i,parameters:{max_length:this.options.maxTokens,temperature:this.options.temperature,return_full_text:!1}},{headers:{Authorization:`Bearer ${a.apiKey}`,"Content-Type":"application/json"}}),l.data[0].generated_text;case"dashscope":return l=await s.post(a.endpoint,{model:a.name,input:{messages:[{role:"user",content:i}]},parameters:{temperature:this.options.temperature,max_tokens:this.options.maxTokens}},{headers:{Authorization:`Bearer ${a.apiKey}`,"Content-Type":"application/json"}}),l.data.output.text;case"openai":return l=await s.post(a.endpoint,{model:a.name,messages:[{role:"user",content:i}],temperature:this.options.temperature,max_tokens:this.options.maxTokens},{headers:{Authorization:`Bearer ${a.apiKey}`,"Content-Type":"application/json"}}),l.data.choices[0].message.content;default:throw new Error(`不支持的模型类型：${a.type}`)}}catch(n){return console.error(e.red(`使用模型 ${a.name} 审核文件 ${o} 时出错：${n.message}`)),null}}async reviewDirectory(o){const s=[],a={},r=e=>{t.readdirSync(e).forEach((o=>{const a=n.join(e,o);t.statSync(a).isDirectory()?r(a):this.shouldReviewFile(o)&&s.push(a)}))};r(o),this.options.models.forEach((e=>{a[e.name]=[]}));for(const n of s){console.log(e.blue(`正在审核文件：${n}`));for(const o of this.options.models){console.log(e.blue(`使用模型 ${o.name} 进行审核...`));const t=await this.reviewFile(n,o);t&&a[o.name].push(t)}}return a}shouldReviewFile(e){return[".js",".jsx",".ts",".tsx",".vue",".py",".java",".cpp",".c",".cs"].some((n=>e.endsWith(n)))}generateHtmlReport(e){const o=`\n<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>多模型代码审核对比报告</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        h1 {\n            color: #2c3e50;\n            border-bottom: 2px solid #eee;\n            padding-bottom: 10px;\n        }\n        h2 {\n            color: #34495e;\n            margin-top: 30px;\n        }\n        .model-section {\n            margin-bottom: 40px;\n            padding: 20px;\n            border: 1px solid #eee;\n            border-radius: 8px;\n        }\n        .model-header {\n            background-color: #f8f9fa;\n            padding: 10px;\n            border-radius: 5px;\n            margin-bottom: 20px;\n        }\n        pre {\n            background-color: #f8f9fa;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        code {\n            font-family: 'Courier New', Courier, monospace;\n            background-color: #f8f9fa;\n            padding: 2px 5px;\n            border-radius: 3px;\n        }\n        .file-info {\n            background-color: #f8f9fa;\n            padding: 10px;\n            border-radius: 5px;\n            margin: 10px 0;\n        }\n        .timestamp {\n            color: #666;\n            font-size: 0.9em;\n        }\n        .model-comparison {\n            margin-top: 40px;\n            padding: 20px;\n            background-color: #f8f9fa;\n            border-radius: 8px;\n        }\n        .model-comparison h2 {\n            color: #2c3e50;\n            margin-bottom: 20px;\n        }\n        .comparison-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n        .comparison-table th,\n        .comparison-table td {\n            padding: 10px;\n            border: 1px solid #ddd;\n            text-align: left;\n        }\n        .comparison-table th {\n            background-color: #f1f1f1;\n        }\n    </style>\n</head>\n<body>\n    <h1>多模型代码审核对比报告</h1>\n    <div class="timestamp">生成时间：${(new Date).toLocaleString()}</div>\n    \n    ${Object.entries(e).map((([e,n])=>`\n        <div class="model-section">\n            <div class="model-header">\n                <h2>模型：${e}</h2>\n            </div>\n            ${n.map((e=>`\n                <div class="review-result">\n                    ${e}\n                </div>\n            `)).join("<hr>")}\n        </div>\n    `)).join("")}\n\n    <div class="model-comparison">\n        <h2>模型对比分析</h2>\n        <table class="comparison-table">\n            <thead>\n                <tr>\n                    <th>模型名称</th>\n                    <th>审核文件数</th>\n                    <th>平均响应时间</th>\n                    <th>特点分析</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${Object.entries(e).map((([e,n])=>`\n                    <tr>\n                        <td>${e}</td>\n                        <td>${n.length}</td>\n                        <td>${(n.reduce(((e,n)=>e+n.responseTime),0)/n.length).toFixed(2)}ms</td>\n                        <td>${this.getModelAnalysis(e,n)}</td>\n                    </tr>\n                `)).join("")}\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>`,s=n.join(process.cwd(),"code-review-comparison.html");return t.writeFileSync(s,o),s}getModelAnalysis(e,n){return{"bigscience/bloom-560m":"开源模型，响应较快，适合基础代码审查","qwen-7b-chat":"中文理解能力强，适合中文项目代码审查","gpt-3.5-turbo":"通用性强，代码审查质量较高"}[e]||"暂无分析"}}async function r(n={}){console.log(e.green("******开始多模型代码审核******"));try{const t=[];if(process.env.HUGGING_FACE_API_KEY&&t.push("Hugging Face (BLOOM)"),process.env.DASHSCOPE_API_KEY&&t.push("通义千问"),process.env.OPENAI_API_KEY&&t.push("OpenAI GPT"),0===t.length)return console.log(e.yellow("提示：未设置任何 API Key")),console.log(e.blue("\n请设置以下环境变量之一：")),console.log(e.blue("\n1. Hugging Face API Key:")),console.log(e.white("   # Linux/Mac:")),console.log(e.gray("   export HUGGING_FACE_API_KEY=你的API密钥")),console.log(e.white("   # Windows CMD:")),console.log(e.gray("   set HUGGING_FACE_API_KEY=你的API密钥")),console.log(e.white("   # Windows PowerShell:")),console.log(e.gray('   $env:HUGGING_FACE_API_KEY="你的API密钥"')),console.log(e.blue("\n2. 通义千问 API Key:")),console.log(e.white("   # Linux/Mac:")),console.log(e.gray("   export DASHSCOPE_API_KEY=你的API密钥")),console.log(e.white("   # Windows CMD:")),console.log(e.gray("   set DASHSCOPE_API_KEY=你的API密钥")),console.log(e.white("   # Windows PowerShell:")),console.log(e.gray('   $env:DASHSCOPE_API_KEY="你的API密钥"')),console.log(e.blue("\n3. OpenAI API Key:")),console.log(e.white("   # Linux/Mac:")),console.log(e.gray("   export OPENAI_API_KEY=你的API密钥")),console.log(e.white("   # Windows CMD:")),console.log(e.gray("   set OPENAI_API_KEY=你的API密钥")),console.log(e.white("   # Windows PowerShell:")),console.log(e.gray('   $env:OPENAI_API_KEY="你的API密钥"')),console.log(e.blue("\n获取方式：")),console.log(e.blue("- Hugging Face: https://huggingface.co/settings/tokens")),console.log(e.blue("- 通义千问: https://dashscope.aliyuncs.com/")),console.log(e.blue("- OpenAI: https://platform.openai.com/api-keys")),void console.log(e.yellow("\n注意：设置环境变量后需要重新打开终端才能生效"));console.log(e.green("可用的模型：")),t.forEach((n=>{console.log(e.blue(`- ${n}`))}));const s=new a(n),r=n.targetDir||process.cwd();console.log(e.blue(`\n正在扫描目录：${r}`)),console.log(e.blue("将使用所有可用的模型进行代码审核..."));const i=await s.reviewDirectory(r);if(Object.values(i).every((e=>0===e.length)))return void console.log(e.yellow("没有找到需要审核的代码文件"));const l=s.generateHtmlReport(i);console.log(e.green(`✓ 多模型代码审核对比报告已生成：${l}`)),"darwin"===process.platform?o("open",[l]):"win32"===process.platform?o("cmd",["/c","start",l]):o("xdg-open",[l])}catch(n){console.error(e.red(`代码审核失败：${n.message}`))}}export{r as default};
