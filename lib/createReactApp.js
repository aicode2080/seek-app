"use strict";const e=require("https"),o=require("chalk"),n=require("commander"),r=require("dns"),t=require("envinfo"),s=require("child_process").execSync,c=require("fs-extra"),i=require("hyperquest"),a=require("prompts"),l=require("os"),p=require("path"),g=require("semver"),u=require("cross-spawn"),d=require("tmp"),m=require("tar-pack").unpack,h=require("url"),f=require("validate-npm-package-name"),y=require("./package.json");let v;function $(e,n){let r="react-scripts";const t=g.valid(e);t?r+=`@${t}`:e&&("@"!==e[0]||e.includes("/")?r=e.match(/^file:/)?`file:${p.resolve(n,e.match(/^file:(.*)?$/)[1])}`:e:r+=e);const s=[{name:"react-scripts-ts",message:o.yellow(`The react-scripts-ts package is deprecated. TypeScript is now supported natively in Create React App. You can use the ${o.green("--template typescript")} option instead when generating your app to include TypeScript support. Would you like to continue using react-scripts-ts?`)}];for(const e of s)if(r.startsWith(e.name))return a({type:"confirm",name:"useScript",message:e.message,initial:!1}).then((e=>(e.useScript||process.exit(0),r)));return Promise.resolve(r)}function w(e,o){let n="cra-template";if(e)if(e.match(/^file:/))n=`file:${p.resolve(o,e.match(/^file:(.*)?$/)[1])}`;else if(e.includes("://")||e.match(/^.+\.(tgz|tar\.gz)$/))n=e;else{const o=e.match(/^(@[^/]+\/)?([^@]+)?(@.+)?$/),r=o[1]||"",t=o[2]||"",s=o[3]||"";n=t===n||t.startsWith(`${n}-`)?`${r}${t}${s}`:!s||r||t?`${r}${n}-${t}${s}`:`${s}/${n}`}return Promise.resolve(n)}function b(e){if(e.match(/^.+\.(tgz|tar\.gz)$/))return new Promise(((e,o)=>{d.dir({unsafeCleanup:!0},((n,r,t)=>{n?o(n):e({tmpdir:r,cleanup:()=>{try{t()}catch(e){}}})}))})).then((o=>{let n;return n=/^http/.test(e)?i(e):c.createReadStream(e),function(e,o){return new Promise(((n,r)=>{e.pipe(m(o,(e=>{e?r(e):n(o)})))}))}(n,o.tmpdir).then((()=>o))})).then((e=>{const{name:o,version:n}=require(p.join(e.tmpdir,"package.json"));return e.cleanup(),{name:o,version:n}})).catch((n=>{console.log(`Could not extract the package name from the archive: ${n.message}`);const r=e.match(/^.+\/(.+?)(?:-\d+.+)?\.(tgz|tar\.gz)$/)[1];return console.log(`Based on the filename, assuming it is "${o.cyan(r)}"`),Promise.resolve({name:r})}));if(e.startsWith("git+"))return Promise.resolve({name:e.match(/([^/]+)\.git(#.*)?$/)[1]});if(e.match(/.+@/))return Promise.resolve({name:e.charAt(0)+e.substr(1).split("@")[0],version:e.split("@")[1]});if(e.match(/^file:/)){const o=e.match(/^file:(.*)?$/)[1],{name:n,version:r}=require(p.join(o,"package.json"));return Promise.resolve({name:n,version:r})}return Promise.resolve({name:e})}function k(e,n){const r=e[n];void 0===r&&(console.error(o.red(`Missing ${n} dependency in package.json`)),process.exit(1));let t=`^${r}`;g.validRange(t)||(console.error(`Unable to patch ${n} dependency version because version ${o.red(r)} will become invalid ${o.red(t)}`),t=r),e[n]=t}module.exports={init:function(){(function(){const e=p.join(__dirname,"given-deprecation-warning");return c.existsSync(e)})()||(console.log(o.yellow.bold("create-react-app is deprecated.")),console.log(""),console.log("You can find a list of up-to-date React frameworks on react.dev"),console.log("For more info see:"+o.underline("https://react.dev/link/cra")),console.log(""),console.log(o.grey("This error message will only be shown once per install.")),function(){const e=p.join(__dirname,"given-deprecation-warning");c.writeFileSync(e,"true")}());const i=new n.Command(y.name).version(y.version).arguments("<project-directory>").usage(`${o.green("<project-directory>")} [options]`).action((e=>{v=e})).option("--verbose","print additional logs").option("--info","print environment debug info").option("--scripts-version <alternative-package>","use a non-standard version of react-scripts").option("--template <path-to-template>","specify a template for the created project").option("--use-pnp").allowUnknownOption().on("--help",(()=>{console.log(`    Only ${o.green("<project-directory>")} is required.`),console.log(),console.log(`    A custom ${o.cyan("--scripts-version")} can be one of:`),console.log(`      - a specific npm version: ${o.green("0.8.2")}`),console.log(`      - a specific npm tag: ${o.green("@next")}`),console.log(`      - a custom fork published on npm: ${o.green("my-react-scripts")}`),console.log(`      - a local path relative to the current working directory: ${o.green("file:../my-react-scripts")}`),console.log(`      - a .tgz archive: ${o.green("https://mysite.com/my-react-scripts-0.8.2.tgz")}`),console.log(`      - a .tar.gz archive: ${o.green("https://mysite.com/my-react-scripts-0.8.2.tar.gz")}`),console.log("    It is not needed unless you specifically want to use a fork."),console.log(),console.log(`    A custom ${o.cyan("--template")} can be one of:`),console.log(`      - a custom template published on npm: ${o.green("cra-template-typescript")}`),console.log(`      - a local path relative to the current working directory: ${o.green("file:../my-custom-template")}`),console.log(`      - a .tgz archive: ${o.green("https://mysite.com/my-custom-template-0.8.2.tgz")}`),console.log(`      - a .tar.gz archive: ${o.green("https://mysite.com/my-custom-template-0.8.2.tar.gz")}`),console.log(),console.log("    If you have any problems, do not hesitate to file an issue:"),console.log(`      ${o.cyan("https://github.com/facebook/create-react-app/issues/new")}`),console.log()})).parse(process.argv);if(i.info)return console.log(o.bold("\nEnvironment Info:")),console.log(`\n  current version of ${y.name}: ${y.version}`),console.log(`  running from ${__dirname}`),t.run({System:["OS","CPU"],Binaries:["Node","npm","Yarn"],Browsers:["Chrome","Edge","Internet Explorer","Firefox","Safari"],npmPackages:["react","react-dom","react-scripts"],npmGlobalPackages:["create-react-app"]},{duplicates:!0,showNotFound:!0}).then(console.log);void 0===v&&(console.error("Please specify the project directory:"),console.log(`  ${o.cyan(i.name())} ${o.green("<project-directory>")}`),console.log(),console.log("For example:"),console.log(`  ${o.cyan(i.name())} ${o.green("my-react-app")}`),console.log(),console.log(`Run ${o.cyan(`${i.name()} --help`)} to see all options.`),process.exit(1)),new Promise(((o,n)=>{e.get("https://registry.npmjs.org/-/package/create-react-app/dist-tags",(e=>{if(200===e.statusCode){let n="";e.on("data",(e=>n+=e)),e.on("end",(()=>{o(JSON.parse(n).latest)}))}else n()})).on("error",(()=>{n()}))})).catch((()=>{try{return s("npm view create-react-app version").toString().trim()}catch(e){return null}})).then((e=>{if(e&&g.lt(y.version,e))console.log(),console.error(o.yellow(`You are running \`create-react-app\` ${y.version}, which is behind the latest release (${e}).\n\nWe recommend always using the latest version of create-react-app if possible.`)),console.log(),console.log("The latest instructions for creating a new app can be found here:\nhttps://create-react-app.dev/docs/getting-started/"),console.log();else{const e=0===(process.env.npm_config_user_agent||"").indexOf("yarn");!function(e,n,t,i,a,d){g.satisfies(g.coerce(process.version),">=14")||(console.log(o.yellow(`You are using Node ${process.version} so the project will be bootstrapped with an old unsupported version of tools.\n\nPlease update to Node 14 or higher for a better, fully supported experience.\n`)),t="react-scripts@0.9.x");const m=p.resolve(e),y=p.basename(m);(function(e){const n=f(e);n.validForNewPackages||(console.error(o.red(`Cannot create a project named ${o.green(`"${e}"`)} because of npm naming restrictions:\n`)),[...n.errors||[],...n.warnings||[]].forEach((e=>{console.error(o.red(`  * ${e}`))})),console.error(o.red("\nPlease choose a different project name.")),process.exit(1));const r=["react","react-dom","react-scripts"].sort();r.includes(e)&&(console.error(o.red(`Cannot create a project named ${o.green(`"${e}"`)} because a dependency with the same name exists.\nDue to the way npm works, the following names are not allowed:\n\n`)+o.cyan(r.map((e=>`  ${e}`)).join("\n"))+o.red("\n\nPlease choose a different project name.")),process.exit(1))})(y),c.ensureDirSync(e),function(e,n){const r=[".DS_Store",".git",".gitattributes",".gitignore",".gitlab-ci.yml",".hg",".hgcheck",".hgignore",".idea",".npmignore",".travis.yml","docs","LICENSE","README.md","mkdocs.yml","Thumbs.db"],t=["npm-debug.log","yarn-error.log","yarn-debug.log"],s=e=>t.some((o=>e.startsWith(o))),i=c.readdirSync(e).filter((e=>!r.includes(e))).filter((e=>!/\.iml$/.test(e))).filter((e=>!s(e)));if(i.length>0){console.log(`The directory ${o.green(n)} contains files that could conflict:`),console.log();for(const n of i)try{c.lstatSync(p.join(e,n)).isDirectory()?console.log(`  ${o.blue(`${n}/`)}`):console.log(`  ${n}`)}catch(e){console.log(`  ${n}`)}return console.log(),console.log("Either try using a new directory name, or remove the files listed above."),!1}return c.readdirSync(e).forEach((o=>{s(o)&&c.removeSync(p.join(e,o))})),!0}(m,e)||process.exit(1);console.log(),console.log(`Creating a new React app in ${o.green(m)}.`),console.log();const v={name:y,version:"0.1.0",private:!0};c.writeFileSync(p.join(m,"package.json"),JSON.stringify(v,null,2)+l.EOL);const j=process.cwd();process.chdir(m),a||function(){const e=process.cwd();let n=null;try{n=u.sync("npm",["config","list"]).output.join("")}catch(e){return!0}if("string"!=typeof n)return!0;const r=n.split("\n"),t="; cwd = ",s=r.find((e=>e.startsWith(t)));if("string"!=typeof s)return!0;const c=s.substring(t.length);if(c===e)return!0;console.error(o.red(`Could not start an npm process in the right directory.\n\nThe current directory is: ${o.bold(e)}\nHowever, a newly started npm process runs in: ${o.bold(c)}\n\nThis is probably caused by a misconfigured system terminal shell.`)),"win32"===process.platform&&console.error(o.red("On Windows, this can usually be fixed by running:\n\n")+`  ${o.cyan("reg")} delete "HKCU\\Software\\Microsoft\\Command Processor" /v AutoRun /f\n`+`  ${o.cyan("reg")} delete "HKLM\\Software\\Microsoft\\Command Processor" /v AutoRun /f\n\n`+o.red("Try to run the above two lines in the terminal.\n")+o.red("To learn more about this problem, read: https://blogs.msdn.microsoft.com/oldnewthing/20071121-00/?p=24433/"));return!1}()||process.exit(1);if(a){if(d){const e=function(){const e="1.12.0",o="2.0.0";let n=!1,r=!1,t=null;try{if(t=s("yarnpkg --version").toString().trim(),g.valid(t))n=g.gte(t,e),r=g.lt(t,o);else{const s=/^(.+?)[-+].+$/.exec(t);if(s){const t=s.pop();n=g.gte(t,e),r=g.lt(t,o)}}}catch(e){}return{hasMinYarnPnp:n,hasMaxYarnPnp:r,yarnVersion:t}}();e.yarnVersion&&(e.hasMinYarnPnp||(console.log(o.yellow(`You are using Yarn ${e.yarnVersion} together with the --use-pnp flag, but Plug'n'Play is only supported starting from the 1.12 release.\n\nPlease update to Yarn 1.12 or higher for a better, fully supported experience.\n`)),d=!1),e.hasMaxYarnPnp||(console.log(o.yellow("The --use-pnp flag is no longer necessary with yarn 2 and will be deprecated and removed in a future release.\n")),d=!1))}}else{const e=function(){let e=!1,o=null;try{o=s("npm --version").toString().trim(),e=g.gte(o,"6.0.0")}catch(e){}return{hasMinNpm:e,npmVersion:o}}();e.hasMinNpm||(e.npmVersion&&console.log(o.yellow(`You are using npm ${e.npmVersion} so the project will be bootstrapped with an old unsupported version of tools.\n\nPlease update to npm 6 or higher for a better, fully supported experience.\n`)),t="react-scripts@0.9.x")}!function(e,n,t,i,a,d,m,f){Promise.all([$(t,a),w(d,a)]).then((([y,v])=>{const $=["react","react-dom",y];console.log("Installing packages. This might take a couple of minutes."),Promise.all([b(y),b(v)]).then((([e,o])=>function(e){if(!e)return Promise.resolve(!0);return new Promise((e=>{r.lookup("registry.yarnpkg.com",(o=>{let n;null!=o&&(n=function(){if(process.env.https_proxy)return process.env.https_proxy;try{let e=s("npm config get https-proxy").toString().trim();return"null"!==e?e:void 0}catch(e){return}}())?r.lookup(h.parse(n).hostname,(o=>{e(null==o)})):e(null==o)}))}))}(m).then((n=>({isOnline:n,packageInfo:e,templateInfo:o}))))).then((({isOnline:n,packageInfo:r,templateInfo:t})=>{let s=g.coerce(r.version);const c="3.3.0";g.valid(s)||(s=c);const a=g.gte(s,c);return a?$.push(v):d&&(console.log(""),console.log(`The ${o.cyan(r.name)} version you're using ${"react-scripts"===r.name?"is not":"may not be"} compatible with the ${o.cyan("--template")} option.`),console.log("")),console.log(`Installing ${o.cyan("react")}, ${o.cyan("react-dom")}, and ${o.cyan(r.name)}${a?` with ${o.cyan(t.name)}`:""}...`),console.log(),function(e,n,r,t,s,c){return new Promise(((i,a)=>{let l,p;n?(l="yarnpkg",p=["add","--exact"],c||p.push("--offline"),r&&p.push("--enable-pnp"),[].push.apply(p,t),p.push("--cwd"),p.push(e),c||(console.log(o.yellow("You appear to be offline.")),console.log(o.yellow("Falling back to the local Yarn cache.")),console.log())):(l="npm",p=["install","--no-audit","--save","--save-exact","--loglevel","error"].concat(t),r&&(console.log(o.yellow("NPM doesn't support PnP.")),console.log(o.yellow("Falling back to the regular installs.")),console.log())),s&&p.push("--verbose");u(l,p,{stdio:"inherit"}).on("close",(e=>{0===e?i():a({command:`${l} ${p.join(" ")}`})}))}))}(e,m,f,$,i,n).then((()=>({packageInfo:r,supportsTemplates:a,templateInfo:t})))})).then((async({packageInfo:r,supportsTemplates:s,templateInfo:d})=>{const m=r.name,h=s?d.name:void 0;!function(e){const n=p.resolve(process.cwd(),"node_modules",e,"package.json");if(!c.existsSync(n))return;const r=require(n);if(!r.engines||!r.engines.node)return;g.satisfies(process.version,r.engines.node)||(console.error(o.red("You are running Node %s.\nCreate React App requires Node %s or higher. \nPlease update your version of Node."),process.version,r.engines.node),process.exit(1))}(m),function(e){const n=p.join(process.cwd(),"package.json"),r=require(n);void 0===r.dependencies&&(console.error(o.red("Missing dependencies in package.json")),process.exit(1));const t=r.dependencies[e];void 0===t&&(console.error(o.red(`Unable to find ${e} in package.json`)),process.exit(1));k(r.dependencies,"react"),k(r.dependencies,"react-dom"),c.writeFileSync(n,JSON.stringify(r,null,2)+l.EOL)}(m);const f=p.resolve(process.cwd(),".pnp.js"),y=c.existsSync(f)?["--require",f]:[];await function({cwd:e,args:o},n,r){return new Promise(((t,s)=>{u(process.execPath,[...o,"-e",r,"--",JSON.stringify(n)],{cwd:e,stdio:"inherit"}).on("close",(e=>{0===e?t():s({command:`node ${o.join(" ")}`})}))}))}({cwd:process.cwd(),args:y},[e,n,i,a,h],`\n        const init = require('${m}/scripts/init.js');\n        init.apply(null, JSON.parse(process.argv[1]));\n      `),"react-scripts@0.9.x"===t&&console.log(o.yellow("\nNote: the project was bootstrapped with an old unsupported version of tools.\nPlease update to Node >=14 and npm >=6 to get supported tools in new projects.\n"))})).catch((r=>{console.log(),console.log("Aborting installation."),r.command?console.log(`  ${o.cyan(r.command)} has failed.`):(console.log(o.red("Unexpected error. Please report it as a bug:")),console.log(r)),console.log();const t=["package.json","node_modules"];c.readdirSync(p.join(e)).forEach((n=>{t.forEach((r=>{n===r&&(console.log(`Deleting generated file... ${o.cyan(n)}`),c.removeSync(p.join(e,n)))}))}));c.readdirSync(p.join(e)).length||(console.log(`Deleting ${o.cyan(`${n}/`)} from ${o.cyan(p.resolve(e,".."))}`),process.chdir(p.resolve(e,"..")),c.removeSync(p.join(e))),console.log("Done."),process.exit(1)}))}))}(m,y,t,n,j,i,a,d)}(v,i.verbose,i.scriptsVersion,i.template,e,i.usePnp)}}))},getTemplateInstallPackage:w};
