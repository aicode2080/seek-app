{"version":3,"file":"seek-app.js","sources":["../src/seek-app.js"],"sourcesContent":["const program = require('commander');\nconst chalk = require('chalk');\nconst path = require('path');\nconst fs = require('fs-extra');\nconst { exec, spawn } = require('child_process');\nconst prettier = require('prettier');\nconst handleCodeReview = require('./code-review-command');\nconst lintFiles = require('./eslint');\nconst installEslint = require('./install-eslint');\nconst installPrettier = require('./install-prettier');\n// import version from '../package.json'; // 获取 package.json 中的版本号 高版本nodejs 导入方式\n\n// 获取当前文件的目录路径\nconst __dirname = path.dirname(require.main.filename);\n\n// 获取 package.json 中的版本号\nconst version = require('../package.json').version;\n\nprogram\n  .version(version, '-v, --version', '显示版本号')\n  .command('v')\n  .description('显示版本信息')\n  .action(() => {\n    console.log(chalk.blue('版本信息：'));\n    console.log(chalk.green(`seek-app: ${version}`));\n    console.log(chalk.green(`Node.js: ${process.version}`));\n    console.log(chalk.green(`npm: ${process.env.npm_version || '未知'}`));\n  });\n\n// 添加更新选项\nprogram\n  .command('update')\n  .alias('u')\n  .description('更新到最新版本')\n  .action(async () => {\n    console.log(chalk.yellow(`当前版本：${version}`));\n    console.log(chalk.blue('正在更新 seek-app 到最新版本...'));\n\n    // 先获取最新版本号\n    exec('npm view seek-app version', (error, stdout, stderr) => {\n      if (error) {\n        console.error(chalk.red(`获取最新版本号失败：${error.message}`));\n        return;\n      }\n\n      const latestVersion = stdout.trim();\n\n      // 如果最新版本与当前版本相同，提示已是最新\n      if (latestVersion === version) {\n        console.log(chalk.yellow('当前已是最新版本！'));\n        return;\n      }\n\n      // 安装最新版本\n      exec('npm i seek-app@latest -g', async (error, stdout, stderr) => {\n        if (error) {\n          console.error(chalk.red(`更新失败：${error.message}`));\n          return;\n        }\n\n        console.log(chalk.green(`更新成功！新版本号：${latestVersion}`));\n      });\n    });\n  });\n\n// 添加调试选项\nprogram\n  .command('debug')\n  .alias('d')\n  .description('调试模式')\n  .action(async (name) => {\n    console.log(chalk.blue('===== 调试信息 ====='));\n\n    // 显示当前版本信息\n    console.log(chalk.yellow('版本信息：'));\n    console.log(`当前版本：${version}`);\n\n    // 显示 Node.js 环境信息\n    console.log(chalk.yellow('\\n环境信息：'));\n    console.log(`Node.js 版本：${process.version}`);\n    console.log(`操作系统：${process.platform}`);\n    console.log(`系统架构：${process.arch}`);\n\n    // 显示依赖信息\n    console.log(chalk.yellow('\\n依赖信息：'));\n    Object.entries(require('../package.json').dependencies).forEach(([dep, version]) => {\n      console.log(`${dep}: ${version}`);\n    });\n\n    // 显示全局安装路径\n    exec('npm root -g', (error, stdout, stderr) => {\n      if (!error) {\n        console.log(chalk.yellow('\\n全局安装路径：'));\n        console.log(stdout.trim());\n      }\n    });\n\n    console.log(chalk.blue('\\n===== 调试信息结束 ====='));\n  });\n\n// 添加关闭调试模式选项\nprogram\n  .command('close-debug')\n  .alias('c')\n  .description('关闭调试模式')\n  .action(async () => {\n    console.log(chalk.blue('===== 关闭调试模式 ====='));\n\n    // 设置环境变量来关闭调试\n    process.env.NODE_ENV = 'production';\n\n    // 关闭调试相关的日志输出\n    console.log(chalk.yellow('已关闭调试模式'));\n    console.log(chalk.yellow('当前环境：') + chalk.green(process.env.NODE_ENV));\n\n    // 显示当前状态\n    console.log(chalk.yellow('\\n调试状态：') + chalk.red('已关闭'));\n    console.log(chalk.blue('\\n===== 调试模式已关闭 ====='));\n  });\n\n// 执行git自动化命令\nprogram\n  .command('git')\n  .alias('g')\n  .description('git操作')\n  .action(async (name) => {\n    console.log(chalk.green(`******执行git自动化命令******`));\n    const gitAutoPath = path.join(__dirname, 'git-auto.js');\n\n    const gitProcess = spawn('node', [gitAutoPath], {\n      stdio: 'inherit',\n      shell: true\n    });\n\n    gitProcess.on('error', (error) => {\n      console.error(chalk.red(`执行失败：${error.message}`));\n    });\n\n    gitProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(chalk.red(`命令执行失败，退出码：${code}`));\n      }\n      console.log(chalk.yellow('\\n执行结束'));\n    });\n  });\n\n// 执行自动创建组件模块\n  program\n  .command('cmodule')\n  .alias('cm')\n  .description('创建组件模块')\n  .action(async (name) => {\n    console.log(chalk.green(`******执行创建模块自动化命令******`));\n    const reactAutoPath = path.join(__dirname, 'index.js');\n    const reactProcess = spawn('node', [reactAutoPath], {\n      stdio: 'inherit',\n      shell: true\n    });\n\n    reactProcess.on('error', (error) => {\n      console.error(chalk.red(`执行失败：${error.message}`));\n    });\n\n    reactProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(chalk.red(`命令执行失败，退出码：${code}`));\n      }\n      console.log(chalk.yellow('\\n执行结束'));\n    });\n  });\n\n\n// 执行schema 转换成interface typescript \nprogram\n  .command('async')\n  .alias('s')\n  .description('自动化生成ts命令')\n  .action(async (name) => {\n    console.log(chalk.green(`******执行typscript自动化命令******`));\n    const schemaAutoPath = path.join(__dirname, 'interface-auto.js');\n    const schemaProcess = spawn('node', [schemaAutoPath], {\n      stdio: 'inherit',\n      shell: true\n    });\n    schemaProcess.on('error', (error) => {\n      console.error(chalk.red(`执行失败：${error.message}`));\n    });\n\n    schemaProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(chalk.red(`命令执行失败，退出码：${code}`));\n      }\n      console.log(chalk.yellow('\\n执行结束'));\n    });\n  });\n\nprogram\n  .command('create')\n  .alias('n')\n  .description('创建项目模版')\n  .action(async (name) => {\n    console.log(chalk.green(`******创建react公司项目模版开发中******`));\n    // const schemaAutoPath = path.join(__dirname, 'interface-auto.js');\n    // const schemaProcess = spawn('node', [schemaAutoPath], {\n    //   stdio: 'inherit',\n    //   shell: true\n    // });\n    // schemaProcess.on('error', (error) => {\n    //   console.error(chalk.red(`执行失败：${error.message}`));\n    // });\n\n    // schemaProcess.on('close', (code) => {\n    //   if (code !== 0) {\n    //     console.error(chalk.red(`命令执行失败，退出码：${code}`));\n    //   }\n    //   console.log(chalk.yellow('\\n执行结束'));\n    // });\n  });\n\n// 执行eslint配置命令\nprogram\n  .command('lint')\n  .alias('l')\n  .description('代码检查')\n  .option('-d, --dir <dir>', '指定要检查的目录', process.cwd())\n  .option('-f, --fix', '自动修复问题')\n  .option('-e, --ext <extensions>', '指定要检查的文件扩展名，用逗号分隔', '.js,.jsx,.ts,.tsx')\n  .action(async (options) => {\n    await installEslint(async () => {\n      try {\n        console.log(chalk.blue('开始代码检查...'));\n        const extensions = options.ext.split(',').map(ext => ext.trim());\n        const errorCount = await lintFiles({\n          targetDir: options.dir,\n          extensions,\n          fix: options.fix\n        });\n        \n        if (errorCount > 0) {\n          console.log(chalk.red(`检查完成，发现 ${errorCount} 个错误`));\n          process.exit(1);\n        } else {\n          console.log(chalk.green('检查完成，未发现错误'));\n        }\n      } catch (error) {\n        console.error(chalk.red(`代码检查失败：${error.message}`));\n        process.exit(1);\n      }\n    })\n  });\n\n\n  // 执行prettier命令\nprogram\n.command('prettier')\n.alias('p')\n.description('格式化代码')\n.option('-d, --dir <dir>', '指定要美化的目录', process.cwd())\n.option('-e, --ext <extensions>', '指定要美化的文件扩展名，用逗号分隔', '.js,.jsx,.ts,.tsx')\n.action(async (options) => {\n  try {\n    const dependencies = [\"prettier@^2.0.0\"];\n    const cwd = process.cwd();\n    // 使用 npm 安装依赖\n       const installProcess = spawn('npm', ['install', '--save-dev', ...dependencies, '--force'], {\n         cwd,\n         stdio: 'inherit'\n       });\n       installProcess.on('close', async (code) => {\n             if (code === 0) {\n              installPrettier(() => {\n                console.log(chalk.green('✓ 安装prettier 依赖成功'));\n                console.log(chalk.blue('\\n现在你可以使用以下命令：'));\n                console.log(chalk.yellow('执行 npm run prettier - 格式化代码'));\n              });\n             } else {\n               console.error(chalk.red('依赖安装失败'));\n             }\n           });\n      \n    } catch (error) {\n      console.log(error);\n    }\n});\n\n// 添加代码审核命令\nprogram\n  .command('rule')\n  .alias('r')\n  .description('代码审核')\n  .option('-d, --dir <directory>', '指定要审核的目录', process.cwd())\n  .option('-m, --model <model>', '指定 AI 模型', 'gpt-4')\n  .option('-t, --temperature <number>', '设置温度参数', '0.7')\n  .option('-k, --max-tokens <number>', '设置最大 token 数', '2000')\n  .action(async (options) => {\n    await handleCodeReview({\n      targetDir: options.dir,\n      model: options.model,\n      temperature: parseFloat(options.temperature),\n      maxTokens: parseInt(options.maxTokens)\n    });\n  });\n\n// 解析命令行参数\nprogram.parse(process.argv);\n"],"names":["program","require","chalk","path","exec","spawn","handleCodeReview","lintFiles","installEslint","installPrettier","__dirname","dirname","main","filename","version","command","description","action","console","log","blue","green","process","env","npm_version","alias","async","yellow","error","stdout","stderr","red","message","latestVersion","trim","platform","arch","Object","entries","dependencies","forEach","dep","NODE_ENV","gitAutoPath","join","gitProcess","stdio","shell","on","code","reactAutoPath","reactProcess","schemaAutoPath","schemaProcess","option","cwd","extensions","options","ext","split","map","errorCount","targetDir","dir","fix","exit","model","temperature","parseFloat","maxTokens","parseInt","parse","argv"],"mappings":"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"}