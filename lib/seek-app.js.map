{"version":3,"file":"seek-app.js","sources":["../src/seek-app.js"],"sourcesContent":["const commander = require('commander');\nconst packageJson = require('../package.json');\nconst chalk = require('chalk');\nconst { exec, spawn } = require('child_process');\nconst path = require('path');\n\nconsole.log(chalk.green('******欢迎使用seek-app脚手架******'));\n\n// 设置版本号\ncommander.version(\n  `seek-app当前版本号：${chalk.green(packageJson.version)}`,\n  '-v, --version',\n  '显示当前版本号'\n);\n\n// 添加更新选项\ncommander\n  .command('update')\n  .alias('u')\n  .description('更新到最新版本')\n  .action(async () => {\n    console.log(chalk.yellow(`当前版本：${packageJson.version}`));\n    console.log(chalk.blue('正在更新 seek-app 到最新版本...'));\n\n    // 先获取最新版本号\n    exec('npm view seek-app version', (error, stdout, stderr) => {\n      if (error) {\n        console.error(chalk.red(`获取最新版本号失败：${error.message}`));\n        return;\n      }\n\n      const latestVersion = stdout.trim();\n\n      // 如果最新版本与当前版本相同，提示已是最新\n      if (latestVersion === packageJson.version) {\n        console.log(chalk.yellow('当前已是最新版本！'));\n        return;\n      }\n\n      // 安装最新版本\n      exec('npm i seek-app@latest -g', async (error, stdout, stderr) => {\n        if (error) {\n          console.error(chalk.red(`更新失败：${error.message}`));\n          return;\n        }\n\n        console.log(chalk.green(`更新成功！新版本号：${latestVersion}`));\n      });\n    });\n  });\n\n// 添加调试选项\ncommander\n  .command('debug')\n  .alias('d')\n  .description('调试模式')\n  .action(async (name) => {\n    console.log(chalk.blue('===== 调试信息 ====='));\n\n    // 显示当前版本信息\n    console.log(chalk.yellow('版本信息：'));\n    console.log(`当前版本：${packageJson.version}`);\n\n    // 显示 Node.js 环境信息\n    console.log(chalk.yellow('\\n环境信息：'));\n    console.log(`Node.js 版本：${process.version}`);\n    console.log(`操作系统：${process.platform}`);\n    console.log(`系统架构：${process.arch}`);\n\n    // 显示依赖信息\n    console.log(chalk.yellow('\\n依赖信息：'));\n    Object.entries(packageJson.dependencies).forEach(([dep, version]) => {\n      console.log(`${dep}: ${version}`);\n    });\n\n    // 显示全局安装路径\n    exec('npm root -g', (error, stdout, stderr) => {\n      if (!error) {\n        console.log(chalk.yellow('\\n全局安装路径：'));\n        console.log(stdout.trim());\n      }\n    });\n\n    console.log(chalk.blue('\\n===== 调试信息结束 ====='));\n  });\n\n// 添加关闭调试模式选项\ncommander\n  .command('close-debug')\n  .alias('c')\n  .description('关闭调试模式')\n  .action(async () => {\n    console.log(chalk.blue('===== 关闭调试模式 ====='));\n    \n    // 设置环境变量来关闭调试\n    process.env.NODE_ENV = 'production';\n    \n    // 关闭调试相关的日志输出\n    console.log(chalk.yellow('已关闭调试模式'));\n    console.log(chalk.yellow('当前环境：') + chalk.green(process.env.NODE_ENV));\n    \n    // 显示当前状态\n    console.log(chalk.yellow('\\n调试状态：') + chalk.red('已关闭'));\n    console.log(chalk.blue('\\n===== 调试模式已关闭 ====='));\n  });\n\n// 执行git自动化命令\ncommander\n  .command('git')\n  .alias('g')\n  .description('git操作')\n  .action(async (name) => {\n    console.log(chalk.green(`******执行git自动化命令******`));\n    const gitAutoPath = path.join(__dirname, 'git-auto.js');\n    \n    const gitProcess = spawn('node', [gitAutoPath], {\n      stdio: 'inherit',\n      shell: true\n    });\n\n    gitProcess.on('error', (error) => {\n      console.error(chalk.red(`执行失败：${error.message}`));\n    });\n\n    gitProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(chalk.red(`命令执行失败，退出码：${code}`));\n      }\n      console.log(chalk.yellow('\\n执行结束'));\n    });\n  });\n\n// 执行schema 转换成interface typescript \ncommander\n  .command('async')\n  .alias('s')\n  .description('自动化生成ts命令')\n  .action(async (name) => {\n    console.log(chalk.green(`******执行typscript自动化命令******`));\n    const schemaAutoPath = path.join(__dirname, 'interface-auto.js');\n    const schemaProcess = spawn('node', [schemaAutoPath], {\n      stdio: 'inherit',\n      shell: true\n    });\n    schemaProcess.on('error', (error) => {\n      console.error(chalk.red(`执行失败：${error.message}`));\n    });\n\n    schemaProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(chalk.red(`命令执行失败，退出码：${code}`));\n      }\n      console.log(chalk.yellow('\\n执行结束'));\n    });\n  });\n\n  commander\n  .command('create')\n  .alias('n')\n  .description('创建项目模版')\n  .action(async (name) => {\n    console.log(chalk.green(`******创建react公司项目模版******`));\n    // const schemaAutoPath = path.join(__dirname, 'interface-auto.js');\n    // const schemaProcess = spawn('node', [schemaAutoPath], {\n    //   stdio: 'inherit',\n    //   shell: true\n    // });\n    // schemaProcess.on('error', (error) => {\n    //   console.error(chalk.red(`执行失败：${error.message}`));\n    // });\n\n    // schemaProcess.on('close', (code) => {\n    //   if (code !== 0) {\n    //     console.error(chalk.red(`命令执行失败，退出码：${code}`));\n    //   }\n    //   console.log(chalk.yellow('\\n执行结束'));\n    // });\n  });\n\n\n// 解析命令行参数\ncommander.parse(process.argv);\n"],"names":["commander","require","packageJson","chalk","exec","spawn","path","console","log","green","version","command","alias","description","action","async","yellow","blue","error","stdout","stderr","red","message","latestVersion","trim","process","platform","arch","Object","entries","dependencies","forEach","dep","env","NODE_ENV","gitAutoPath","join","__dirname","gitProcess","stdio","shell","on","code","schemaAutoPath","schemaProcess","parse","argv"],"mappings":"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"}