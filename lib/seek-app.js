#!/usr/bin/env node
"use strict";const e=require("commander"),o=require("chalk"),n=require("path");require("fs-extra");const{exec:s,spawn:r}=require("child_process");require("prettier");const l=require("./code-review-command"),c=require("./eslint"),i=require("./install-eslint"),t=require("./install-prettier"),a=n.dirname(require.main.filename),d=require("../package.json").version;e.version(d,"-v, --version","显示版本号").command("v").description("显示版本信息").action((()=>{console.log(o.blue("版本信息：")),console.log(o.green(`seek-app: ${d}`)),console.log(o.green(`Node.js: ${process.version}`)),console.log(o.green(`npm: ${process.env.npm_version||"未知"}`))})),e.command("update").alias("u").description("更新到最新版本").action((async()=>{console.log(o.yellow(`当前版本：${d}`)),console.log(o.blue("正在更新 seek-app 到最新版本...")),s("npm view seek-app version",((e,n,r)=>{if(e)return void console.error(o.red(`获取最新版本号失败：${e.message}`));const l=n.trim();l!==d?s("npm i seek-app@latest -g",(async(e,n,s)=>{e?console.error(o.red(`更新失败：${e.message}`)):console.log(o.green(`更新成功！新版本号：${l}`))})):console.log(o.yellow("当前已是最新版本！"))}))})),e.command("debug").alias("d").description("调试模式").action((async e=>{console.log(o.blue("===== 调试信息 =====")),console.log(o.yellow("版本信息：")),console.log(`当前版本：${d}`),console.log(o.yellow("\n环境信息：")),console.log(`Node.js 版本：${process.version}`),console.log(`操作系统：${process.platform}`),console.log(`系统架构：${process.arch}`),console.log(o.yellow("\n依赖信息：")),Object.entries(require("../package.json").dependencies).forEach((([e,o])=>{console.log(`${e}: ${o}`)})),s("npm root -g",((e,n,s)=>{e||(console.log(o.yellow("\n全局安装路径：")),console.log(n.trim()))})),console.log(o.blue("\n===== 调试信息结束 ====="))})),e.command("close-debug").alias("c").description("关闭调试模式").action((async()=>{console.log(o.blue("===== 关闭调试模式 =====")),process.env.NODE_ENV="production",console.log(o.yellow("已关闭调试模式")),console.log(o.yellow("当前环境：")+o.green(process.env.NODE_ENV)),console.log(o.yellow("\n调试状态：")+o.red("已关闭")),console.log(o.blue("\n===== 调试模式已关闭 ====="))})),e.command("git").alias("g").description("git操作").action((async e=>{console.log(o.green("******执行git自动化命令******"));const s=n.join(a,"git-auto.js"),l=r("node",[s],{stdio:"inherit",shell:!0});l.on("error",(e=>{console.error(o.red(`执行失败：${e.message}`))})),l.on("close",(e=>{0!==e&&console.error(o.red(`命令执行失败，退出码：${e}`)),console.log(o.yellow("\n执行结束"))}))})),e.command("cmodule").alias("cm").description("创建组件模块").action((async e=>{console.log(o.green("******执行创建模块自动化命令******"));const s=n.join(a,"index.js"),l=r("node",[s],{stdio:"inherit",shell:!0});l.on("error",(e=>{console.error(o.red(`执行失败：${e.message}`))})),l.on("close",(e=>{0!==e&&console.error(o.red(`命令执行失败，退出码：${e}`)),console.log(o.yellow("\n执行结束"))}))})),e.command("async").alias("s").description("自动化生成ts命令").action((async e=>{console.log(o.green("******执行typscript自动化命令******"));const s=n.join(a,"interface-auto.js"),l=r("node",[s],{stdio:"inherit",shell:!0});l.on("error",(e=>{console.error(o.red(`执行失败：${e.message}`))})),l.on("close",(e=>{0!==e&&console.error(o.red(`命令执行失败，退出码：${e}`)),console.log(o.yellow("\n执行结束"))}))})),e.command("create").alias("n").description("创建项目模版").action((async e=>{console.log(o.green("******创建react公司项目模版开发中******"))})),e.command("lint").alias("l").description("代码检查").option("-d, --dir <dir>","指定要检查的目录",process.cwd()).option("-f, --fix","自动修复问题").option("-e, --ext <extensions>","指定要检查的文件扩展名，用逗号分隔",".js,.jsx,.ts,.tsx").action((async e=>{await i((async()=>{try{console.log(o.blue("开始代码检查..."));const n=e.ext.split(",").map((e=>e.trim())),s=await c({targetDir:e.dir,extensions:n,fix:e.fix});s>0?(console.log(o.red(`检查完成，发现 ${s} 个错误`)),process.exit(1)):console.log(o.green("检查完成，未发现错误"))}catch(e){console.error(o.red(`代码检查失败：${e.message}`)),process.exit(1)}}))})),e.command("prettier").alias("p").description("格式化代码").option("-d, --dir <dir>","指定要美化的目录",process.cwd()).option("-e, --ext <extensions>","指定要美化的文件扩展名，用逗号分隔",".js,.jsx,.ts,.tsx").action((async e=>{try{const e=["prettier@^2.0.0"],n=process.cwd();r("npm",["install","--save-dev",...e,"--force"],{cwd:n,stdio:"inherit"}).on("close",(async e=>{0===e?t((()=>{console.log(o.green("✓ 安装prettier 依赖成功")),console.log(o.blue("\n现在你可以使用以下命令：")),console.log(o.yellow("执行 npm run prettier - 格式化代码"))})):console.error(o.red("依赖安装失败"))}))}catch(e){console.log(e)}})),e.command("rule").alias("r").description("代码审核").option("-d, --dir <directory>","指定要审核的目录",process.cwd()).option("-m, --model <model>","指定 AI 模型","gpt-4").option("-t, --temperature <number>","设置温度参数","0.7").option("-k, --max-tokens <number>","设置最大 token 数","2000").action((async e=>{await l({targetDir:e.dir,model:e.model,temperature:parseFloat(e.temperature),maxTokens:parseInt(e.maxTokens)})})),e.parse(process.argv);
//# sourceMappingURL=seek-app.js.map
