#!/usr/bin/env node
"use strict";const o=require("commander"),e=require("chalk"),n=require("path"),s=require("fs-extra"),{exec:r,spawn:l}=require("child_process");require("prettier");const c=require("./code-review-command"),i=require("./eslint"),t=require("./install-eslint"),p=require("./install-prettier"),a=n.dirname(require.main.filename),d=require("../package.json").version;o.version(d,"-v, --version","显示版本号").command("v").description("显示版本信息").action((()=>{console.log(e.blue("版本信息：")),console.log(e.green(`seek-app: ${d}`)),console.log(e.green(`Node.js: ${process.version}`)),console.log(e.green(`npm: ${process.env.npm_version||"未知"}`))})),o.command("update").alias("u").description("更新到最新版本").action((async()=>{console.log(e.yellow(`当前版本：${d}`)),console.log(e.blue("正在更新 seek-app 到最新版本...")),r("npm view seek-app version",((o,n,s)=>{if(o)return void console.error(e.red(`获取最新版本号失败：${o.message}`));const l=n.trim();l!==d?r("npm i seek-app@latest -g",(async(o,n,s)=>{o?console.error(e.red(`更新失败：${o.message}`)):console.log(e.green(`更新成功！新版本号：${l}`))})):console.log(e.yellow("当前已是最新版本！"))}))})),o.command("debug").alias("d").description("调试模式").action((async o=>{console.log(e.blue("===== 调试信息 =====")),console.log(e.yellow("版本信息：")),console.log(`当前版本：${d}`),console.log(e.yellow("\n环境信息：")),console.log(`Node.js 版本：${process.version}`),console.log(`操作系统：${process.platform}`),console.log(`系统架构：${process.arch}`),console.log(e.yellow("\n依赖信息：")),Object.entries(require("../package.json").dependencies).forEach((([o,e])=>{console.log(`${o}: ${e}`)})),r("npm root -g",((o,n,s)=>{o||(console.log(e.yellow("\n全局安装路径：")),console.log(n.trim()))})),console.log(e.blue("\n===== 调试信息结束 ====="))})),o.command("close-debug").alias("c").description("关闭调试模式").action((async()=>{console.log(e.blue("===== 关闭调试模式 =====")),process.env.NODE_ENV="production",console.log(e.yellow("已关闭调试模式")),console.log(e.yellow("当前环境：")+e.green(process.env.NODE_ENV)),console.log(e.yellow("\n调试状态：")+e.red("已关闭")),console.log(e.blue("\n===== 调试模式已关闭 ====="))})),o.command("git").alias("g").description("git操作").action((async o=>{console.log(e.green("******执行git自动化命令******"));const s=n.join(a,"git-auto.js"),r=l("node",[s],{stdio:"inherit",shell:!0});r.on("error",(o=>{console.error(e.red(`执行失败：${o.message}`))})),r.on("close",(o=>{0!==o&&console.error(e.red(`命令执行失败，退出码：${o}`)),console.log(e.yellow("\n执行结束"))}))})),o.command("cmodule").alias("cm").description("创建组件模块").action((async o=>{console.log(e.green("******执行创建模块自动化命令******"));const s=n.join(a,"create-module.js"),r=l("node",[s],{stdio:"inherit",shell:!0});r.on("error",(o=>{console.error(e.red(`执行失败：${o.message}`))})),r.on("close",(o=>{0!==o&&console.error(e.red(`命令执行失败，退出码：${o}`)),console.log(e.yellow("\n执行结束"))}))})),o.command("typescript").alias("ts").description("自动化生成ts命令").action((async o=>{console.log(e.green("******执行typscript自动化命令******"));const s=n.join(a,"interface-auto.js"),r=l("node",[s],{stdio:"inherit",shell:!0});r.on("error",(o=>{console.error(e.red(`执行失败：${o.message}`))})),r.on("close",(o=>{0!==o&&console.error(e.red(`命令执行失败，退出码：${o}`)),console.log(e.yellow("\n执行结束"))}))})),o.command("create").alias("n").description("创建项目模版").action((async o=>{console.log(e.green("******创建react公司项目模版开发中******"))})),o.command("lint").alias("l").description("代码检查").option("-d, --dir <dir>","指定要检查的目录",process.cwd()).option("-f, --fix","自动修复问题").option("-e, --ext <extensions>","指定要检查的文件扩展名，用逗号分隔",".js,.jsx,.ts,.tsx").action((async o=>{await t((async()=>{try{console.log(e.blue("开始代码检查..."));const n=o.ext.split(",").map((o=>o.trim())),s=await i({targetDir:o.dir,extensions:n,fix:o.fix});s>0?(console.log(e.red(`检查完成，发现 ${s} 个错误`)),process.exit(1)):console.log(e.green("检查完成，未发现错误"))}catch(o){console.error(e.red(`代码检查失败：${o.message}`)),process.exit(1)}}))})),o.command("prettier").alias("p").description("格式化代码").option("-d, --dir <dir>","指定要美化的目录",process.cwd()).option("-e, --ext <extensions>","指定要美化的文件扩展名，用逗号分隔",".js,.jsx,.ts,.tsx").action((async o=>{try{const o=["prettier@^2.0.0"],n=process.cwd();l("npm",["install","--save-dev",...o,"--force"],{cwd:n,stdio:"inherit"}).on("close",(async o=>{0===o?p((()=>{console.log(e.green("✓ 安装prettier 依赖成功")),console.log(e.blue("\n现在你可以使用以下命令：")),console.log(e.yellow("执行 npm run prettier - 格式化代码"))})):console.error(e.red("依赖安装失败"))}))}catch(o){console.log(o)}})),o.command("rule").alias("r").description("代码审核").option("-d, --dir <directory>","指定要审核的目录",process.cwd()).option("-m, --model <model>","指定 AI 模型","gpt-4").option("-t, --temperature <number>","设置温度参数","0.7").option("-k, --max-tokens <number>","设置最大 token 数","2000").action((async o=>{await c({targetDir:o.dir,model:o.model,temperature:parseFloat(o.temperature),maxTokens:parseInt(o.maxTokens)})})),o.command("start").alias("s").description("启动开发服务器").option("-p, --port <number>","指定端口号","3000").option("-h, --host <string>","指定主机名","localhost").option("-c, --config <path>","自定义配置文件路径").action((async o=>{console.log(e.green("******欢迎使用seek-app脚手架******"));try{process.env.NODE_ENV="development",process.env.PORT=o.port,process.env.HOST=o.host;const r=n.resolve(process.cwd(),"package.json");if(!s.existsSync(r))throw new Error("未找到 package.json 文件，请确保在项目根目录下运行此命令");const c=require(r).dependencies||{},i=["rollup","@rollup/plugin-babel","@rollup/plugin-node-resolve","@rollup/plugin-commonjs","@rollup/plugin-json","rollup-plugin-terser","rollup-plugin-serve","rollup-plugin-livereload"].filter((o=>!c[o]));if(i.length>0){console.log(e.yellow("正在安装必要的依赖..."));const o=l("npm",["install","--save-dev",...i],{stdio:"inherit",shell:!0,cwd:process.cwd()});await new Promise((n=>{o.on("close",(o=>{0!==o?console.error(e.red(`依赖安装失败，退出码：${o}`)):console.log(e.green("✓ 依赖安装成功")),n()}))}))}const t=n.resolve(process.cwd(),"rollup.config.js");if(!s.existsSync(t)){console.log(e.blue("正在创建 rollup.config.js..."));const n=`\nconst serve = require('rollup-plugin-serve');\nconst livereload = require('rollup-plugin-livereload');\nconst { babel } = require('@rollup/plugin-babel');\nconst { nodeResolve } = require('@rollup/plugin-node-resolve');\nconst commonjs = require('@rollup/plugin-commonjs');\nconst json = require('@rollup/plugin-json');\n\nmodule.exports = {\n  input: 'src/index.js',\n  output: {\n    dir: 'dist',\n    format: 'umd',\n    name: 'app',\n    sourcemap: true\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs(),\n    json(),\n    babel({\n      babelHelpers: 'bundled',\n      presets: [\n        ['@babel/preset-env', { targets: { browsers: '> 1%, not dead' } }]\n      ]\n    }),\n    serve({\n      contentBase: ['dist', 'public'],\n      host: '${o.host}',\n      port: ${o.port},\n      open: true\n    }),\n    livereload('dist')\n  ]\n};\n        `.trim();s.writeFileSync(t,n),console.log(e.green("✓ 已创建 rollup.config.js"))}const p=n.resolve(process.cwd(),"node_modules/.bin/rollup"),a=["-c",t,"-w"];console.log(e.blue(`执行命令: ${p} ${a.join(" ")}`));const d=l(p,a,{stdio:"inherit",shell:!0,env:{...process.env,NODE_ENV:"development",PORT:o.port,HOST:o.host}});d.on("error",(o=>{console.error(e.red(`执行失败：${o.message}`))})),d.on("close",(o=>{0!==o&&console.error(e.red(`命令执行失败，退出码：${o}`))})),console.log(e.green(`开发服务器已启动：http://${o.host}:${o.port}`))}catch(o){console.error(e.red(`启动开发服务器失败：${o.message}`)),process.exit(1)}})),o.command("build").alias("b").description("构建生产环境代码").option("-o, --output <dir>","指定输出目录","dist").option("-c, --config <path>","自定义配置文件路径").action((async o=>{console.log(e.green("******欢迎使用seek-app脚手架******"));try{let r;if(process.env.NODE_ENV="production",process.env.OUTPUT_DIR=o.output,o.config)r=n.resolve(process.cwd(),o.config);else{const o=n.resolve(process.cwd(),"rollup.config.js");if(s.existsSync(o))r=o;else{r=n.resolve(a,"../rollupConfig/index.js");const o=n.resolve(a,"rollupConfig"),l=n.resolve(process.cwd(),"rollupConfig");if(s.existsSync(o)){console.log(e.blue("正在复制配置文件到您的项目...")),s.existsSync(l)||s.mkdirpSync(l),s.copySync(o,l,{overwrite:!1}),console.log(e.green("✓ 配置文件已复制到您的项目中"));const c="\nconst { rollupConfig } = require('./rollupConfig');\nmodule.exports = rollupConfig;\n            ".trim();s.writeFileSync(n.resolve(process.cwd(),"rollup.config.js"),c),console.log(e.green("✓ 已创建 rollup.config.js")),r=n.resolve(process.cwd(),"rollup.config.js")}}}if(!s.existsSync(r))throw new Error(`找不到配置文件: ${r}`);console.log(e.blue(`使用配置文件: ${r}`));const c=n.resolve(process.cwd(),"node_modules/.bin/rollup");if(!s.existsSync(c)){console.log(e.yellow("正在安装 rollup 和相关依赖..."));const o=l("npm",["install","--save-dev",...["rollup","@rollup/plugin-babel","@rollup/plugin-node-resolve","@rollup/plugin-commonjs","@rollup/plugin-json","rollup-plugin-terser"]],{stdio:"inherit",shell:!0,cwd:process.cwd()});await new Promise((n=>{o.on("close",(o=>{0!==o?console.error(e.red(`依赖安装失败，退出码：${o}`)):console.log(e.green("✓ 依赖安装成功")),n()}))}))}const i=["-c",r];console.log(e.blue(`执行命令: ${c} ${i.join(" ")}`));const t=l(c,i,{stdio:"inherit",shell:!0,env:{...process.env,NODE_ENV:"production",OUTPUT_DIR:o.output}});t.on("error",(o=>{console.error(e.red(`执行失败：${o.message}`))})),t.on("close",(n=>{0!==n?console.error(e.red(`命令执行失败，退出码：${n}`)):console.log(e.green(`构建完成，输出目录：${o.output}`))}))}catch(o){console.error(e.red(`构建失败：${o.message}`)),process.exit(1)}})),o.parse(process.argv);
